package com.example.books;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.util.StringUtils;
import org.joda.time.DateTimeUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.charset.StandardCharsets;

public class BooksS3SaveHandler implements RequestStreamHandler {
    private static final Logger logger = LoggerFactory.getLogger(BooksS3SaveHandler.class);
    private static final String XML_EXTENSION = ".xml";
    private static final String BUCKET_NAME = "hks.books.storage";

    @Override
    public void handleRequest(InputStream input, OutputStream output, Context context) throws IOException {
        logger.info("Loading Java BooksS3SaveHandler");
        JSONParser parser = new JSONParser();
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        JSONObject responseJson = new JSONObject();

        try {
            JSONObject event = (JSONObject) parser.parse(reader);
            logger.info(String.valueOf(event));
            if (event.get("xml") != null) {
                logger.info("body is : \n" + event.get("body"));
                String key = (String) event.get("key");
                if (StringUtils.isNullOrEmpty(key)) {
                    key = "autogenerated-" + DateTimeUtils.currentTimeMillis();
                    logger.info("No key provided. Created a new one: " + key);
                }
                key = key + XML_EXTENSION;
                String xmlSource = (String) event.get("xml");
                if (!StringUtils.isNullOrEmpty(xmlSource)) {
                    logger.info("Storing file to S3...");
                    ObjectMetadata metadata = new ObjectMetadata();
                    metadata.setContentType("text/xml");
                    PutObjectRequest request = new PutObjectRequest(BUCKET_NAME, key, new ByteArrayInputStream(xmlSource.getBytes()), metadata);
                    AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();
                    s3Client.putObject(request);
                }
            }

            JSONObject responseBody = new JSONObject();
            responseBody.put("message", "New item created");
            responseJson.put("statusCode", 200);
            responseJson.put("body", responseBody.toString());

        } catch (ParseException pex) {
            responseJson.put("statusCode", 400);
            responseJson.put("exception", pex);
        }

        OutputStreamWriter writer = new OutputStreamWriter(output, StandardCharsets.UTF_8);
        writer.write(responseJson.toString());
        writer.close();
    }

}
